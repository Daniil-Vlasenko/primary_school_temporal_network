---
title: "Primary school temporal network"
author: "Власенко Даниил"
date: "2023-06-19"
output: 
  html_document:
    toc: true
    toc_float: true
    toc_depth: 3
---

## Данные 

Данные взяты с [этого сайта](http://www.sociopatterns.org/datasets/primary-school-temporal-network-data) (Primary school temporal network data). Данные описывают взаимодействия учеников и учителей начальной школы в течении недели. У каждого участника эксперимента при себе было устройство, которое фиксировало каждые 20 секунд, с кем он сейчас контактирует.

Через анализ этих данных я хочу изучить на практике теорию, изложенную в книгах [Network Science](http://networksciencebook.com/) и [Statistical Analysis of Network Data with R](https://link.springer.com/book/10.1007/978-1-4939-0983-4), и познакомиться с вариантом библиотеки igraph для языка R.

Подключаем необходимые библиотеки:
```{r, message=FALSE}
library(dplyr)
library(igraph)
library(tidyr)
library(RColorBrewer)
```

Читаем данные:
```{r}
data1 <- read.csv("primaryschool.csv", sep="\t", header=FALSE)
colnames(data1) <- c("time", "i", "j", "classi", "classj")
data2 <- read.csv("metadata_primaryschool.txt", sep="\t", header=FALSE)
colnames(data2) <- c("i", "class", "sex")
```

data1 содержит информацию о том, когда (time), кто с кем (i, j) контактировал и из какого они класса или являются ли учителем (classi, classj). data2 содержит дополнительную информацию о поле учеников. 

Хотим работать с взвешенным графом, поэтому посчитаем для каждой пары индивидов (ученик или учитель) число контактов (Freq) и затем удалим из данных пары индивидов, которые не контактировали друг с другом.
```{r}
data1 <- data.frame(table(data1 %>% dplyr::select(i, j))) %>%
  filter(Freq > 0)
```

Создадим взвешенный неориентированный граф:
```{r}
network <- graph_from_data_frame(data1, directed=FALSE, vertices=data2)
```

Проверим данные графа:
```{r}
network
```

Видно, что граф имеет 242 вершины и 8317 ребер.

В исходных данных нет информации о поле некоторых индивидов. Таким образом у вершин графа атрибут sex содержит значения "Unknown" заменим это значение на NA:
```{r}
V(network)$sex[V(network)$sex == "Unknown"] <- NA
V(network)$sex[1:50]
```

Также вершины графа несут информацию о классе ученика или о том, что эта вершина есть учитель:
```{r}
V(network)$class[1:50]
```

У ребер в графе есть веса (число взаимодействий за всю неделю):
```{r}
E(network)$Freq[1:50]
```

## Анализ сети

### Распределения степеней вершин

Так как у ребер есть атрибут Freq, который отражает силу связи инцидентных ребру вершин, то рассмотрим два типа распределений: распределение степеней вершин и распределение взвешенных степеней вершин (распределение сил вершин).

Добавим к вершинами атрибут degree, который будет отражать степень вершины, и wdegree, который будет отражать взвешенную степень вершины:
```{r}
V(network)$degree <- degree(network)
print(paste0("the firts 10 degrees: ", toString(V(network)$degree[1:10])))

V(network)$wdegree <- strength(network, weights=E(network)$Freq)
print(paste0("the firts 10 wdegree: ", toString(V(network)$wdegree[1:10])))
```

Посчитаем некоторые характеристики распределений степеней:

#### {.tabset .unlisted .unnumbered}

##### Невзвешенные степеней вершин

```{r}
print(paste("Mean of sample:", mean(V(network)$degree)))
print(paste("Variance of sample:", var(V(network)$degree)))
print(paste("Median of sample:", median(V(network)$degree)))
print(paste("Min of sample:", min(V(network)$degree)))
print(paste("Max of sample:", max(V(network)$degree)))
```

##### Взвешенные степеней вершин

```{r}
print(paste("Mean of sample:", mean(V(network)$wdegree)))
print(paste("Variance of sample:", var(V(network)$wdegree)))
print(paste("Median of sample:", median(V(network)$wdegree)))
print(paste("Min of sample:", min(V(network)$wdegree)))
print(paste("Max of sample:", max(V(network)$wdegree)))
```

#### {.unlisted .unnumbered}

Изобразим распределения степеней:
```{r}
library(ggplot2)
vertices <- igraph::as_data_frame(network, what="vertices")
```

#### {.tabset .unlisted .unnumbered}

##### Невзвешенные степеней вершин

```{r, message=FALSE}
vertices %>%
  ggplot(aes(x=degree)) +
  geom_histogram(aes(y=..density..))
```

##### Взвешенные степеней вершин

```{r, message=FALSE}
vertices %>%
  ggplot(aes(x=wdegree)) +
  geom_histogram(aes(y=..density..))
```

#### {.unlisted .unnumbered}

Немного похожи на нормальное распределение, проверим это. Критерий Пирсона сначала делит распределение на состояния, чтобы правильно его дискретизировать. Критерий Лиллиефорса - это модификация критерия Колмогорова-Смирнова для проверки сложных гипотез. Критерий Андерона-Дарлинга - это один из критериев типа w^2. Критерий Шапира-Уилка - примерно квадрат корреляции между x и y в n.p.p.
```{r}
library(nortest)
```

#### {.tabset .unlisted .unnumbered}

##### Невзвешенные степеней вершин

```{r}
print(paste("Pearson", pearson.test(vertices$degree)$p))
print(paste("Lilliefors", lillie.test(vertices$degree)$p))
print(paste("Anderson.Darling", ad.test(vertices$degree)$p))
print(paste("Shapiro.Wilk", shapiro.test(vertices$degree)$p))
```

##### Взвешенные степеней вершин

```{r}
print(paste("Pearson", pearson.test(vertices$wdegree)$p))
print(paste("Lilliefors", lillie.test(vertices$wdegree)$p))
print(paste("Anderson.Darling", ad.test(vertices$wdegree)$p))
print(paste("Shapiro.Wilk", shapiro.test(vertices$wdegree)$p))
```

#### {.unlisted .unnumbered}

Критерий Лилифорса с уровнем значимости 0.5 не отверг гипотезу о нормальности для обоих распределений, остальные критерии отвергли.

Далее будем работать с взвешенными степенями, так как это более естественно для взвешенного графа.

### Корреляция степеней вершин

Посчитаем среднюю взвешенную степень для каждой вершины: (anwd = average neighbor weighted degree) и изобразим результат на графике:
```{r, message=FALSE}
V(network)$anwd <- knn(network, weights=E(network)$Freq)[[1]]
vertices$anwd <- V(network)$anwd

vertices %>%
  ggplot(aes(x=degree, y=anwd)) +
  geom_point() +
  geom_smooth(method="lm") +
  xlab("Weighted Vertex Degree") +
  ylab("Average Neighbor Weighted Degree")
```

Можно видеть положительную корреляцию. Интересно посмотреть на этот же график, но с разделением по классам. Снизу слева видна отдельная группа людей, интересно, не учителя ли это.
```{r, message=FALSE}
colors <- c("deeppink1","cyan4",
            "brown1","olivedrab4",
            "cyan1","deeppink4",
            "olivedrab1","royalblue3",
            "gold1","gold4",
            "black")

vertices %>%
  ggplot(aes(x=degree, y=anwd, color=class)) +
  geom_point() +
  geom_smooth(method="lm", se=FALSE) +
  xlab("Weighted Vertex Degree") +
  ylab("Average Neighbor Weighted Degree") +
  scale_color_manual(values=colors)
```

Нет, это не были учителя.

Посчитаем без разделения по классам корреляцию Пирсона для степеней вершин, то есть наклон регрессионной прямой, изображенной на предыдущем графике, а также корреляцию Спирмена:
```{r}
cor(vertices$degree, vertices$anwd, method="pearson")
cor(vertices$degree, vertices$anwd, method="spearman")
```

Больше 0.5. Сеть можно назвать ассортативной, то есть вершины в ней предпочитают связываться с узлами, похожими на них самих. В нашем случае похожесть отражается во взвешенных степенях вершин.

### Центральность вершин

Найдем топ 10 центральных вершин, основываясь на степенях. Я предполагаю, что самыми социальными являются учителя. Помимо взвешенной степени будем использовать степень близости, степень посредничества и степень влиятельности.
```{r}
V(network)$closeness <- closeness(network, weights=1/E(network)$Freq)
vertices$closeness <- V(network)$closeness
V(network)$betweenness <- betweenness(network, weights=1/E(network)$Freq)
vertices$betweenness <- V(network)$betweenness
V(network)$evcent <- evcent(network, weights=1/E(network)$Freq)$vector
vertices$evcent <- V(network)$evcent
```

#### {.tabset .unlisted .unnumbered}

##### Взвешенная степень

```{r}
(vertices %>% arrange(-wdegree))[1:10,]
```

##### Степень близости

```{r}
(vertices %>% arrange(-closeness))[1:10,]
```

##### Степень посредничества

```{r}
(vertices %>% arrange(-betweenness))[1:10,]
```

##### Степень влиятельности

```{r}
(vertices %>% arrange(-evcent))[1:10,]
```

#### {.unlisted .unnumbered}

Нет, оказалось, что учителя не являются самыми социальными. Интересно, что среди самых социальных индивидов много парней. Посмотрим на примере класса 4B и его учителя, насколько он менее социален детей из класса. Изобразим подграф в форме целевой диаграммы (чем ближе точка к центру тем больше значение параметра индивида). Так как имеем дело с плотным графом, ребра много информации нести не будут. Окрасим мальчиков и девочек в синий и розовый цвета соответственно, а учителя отметим черным.
```{r, message=FALSE}
subgraph <- induced_subgraph(network, V(network)[class=="4B" | name=="1521"])
E(subgraph)$inv.Freq <- 1/E(subgraph)$Freq
V(subgraph)[class=="4B" & sex=="M"]$color <- "dodgerblue"
V(subgraph)[class=="4B" & sex=="F"]$color <- "pink"
V(subgraph)[class=="Teachers"]$color <- "black"
A <- as_adjacency_matrix(subgraph, sparse=FALSE)
library(network)
g <- network::as.network.matrix(A)
library(sna)
```

<!-- Следующие блоки вычисляются долго, нужно раскомментировать при полной компиляции. -->

#### {.tabset .unlisted .unnumbered}

##### Взвешенная степень

```{r, message=FALSE}
sna::gplot.target(g, V(subgraph)$wdegree,
   circ.lab = FALSE,
   circ.col="skyblue", usearrows = FALSE,
   vertex.col=V(subgraph)$color,
   edge.col="darkgray")
```

##### Cтепень близости

```{r, message=FALSE}
sna::gplot.target(g, V(subgraph)$closeness,
   circ.lab = FALSE,
   circ.col="skyblue", usearrows = FALSE,
   vertex.col=V(subgraph)$color,
   edge.col="darkgray")
```

##### Cтепень посредничества

```{r, message=FALSE}
sna::gplot.target(g, V(subgraph)$betweenness,
   circ.lab = FALSE,
   circ.col="skyblue", usearrows = FALSE,
   vertex.col=V(subgraph)$color,
   edge.col="darkgray")
```

##### Cтепень влиятельности

```{r, message=FALSE}
sna::gplot.target(g, V(subgraph)$evcent,
   circ.lab = FALSE,
   circ.col="skyblue", usearrows = FALSE,
   vertex.col=V(subgraph)$color,
   edge.col="darkgray")
```

#### {.unlisted .unnumbered}

На графиках можно видеть, что учитель - самый несоциальный индивид, так как расположен почти всегда дальше всех от центра. Можно долго исследовать характеристики центральности и по-разному визуализировать результаты, но остановимся на этом.

### Плотность сети

Вычислим плотность сети:
```{r}
edge_density(network)
```

Вычислим плотности подсетей для каждого класса, они по отдельности должны быть плотнее всей сети школы:
```{r}
class <- unique(V(network)$class)

for(i in class) {
  subgraph <- induced_subgraph(network, V(network)[class == i])
  print(paste("density of", i, ":", edge_density(subgraph)))
}
```

Так и выходит, логично, что дети внутри класса контактируют друг с другом больше.

Изобразим матрицу сопряженности для всей сети, чем темнее точка тем выше степень взаимодействия двух индивидов:
```{r, message=FALSE, warning=FALSE}
edges <- as_long_data_frame(network) %>% 
  mutate(from = as.character(from), to = as.character(to))

tmp <- data.frame(to = edges$from, from = edges$to, Freq = edges$Freq, 
                 to_class = edges$from_class, from_class = edges$to_class)

tmp <- rbind(edges %>% select(from, to, Freq, to_class, from_class), tmp)

tmp %>%
  ggplot(aes(from, to)) +
  geom_raster(aes(fill=Freq)) +
  scale_fill_gradient2(low="gray100", mid="gray50", high="gray0") +
  theme(legend.position="none") +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        panel.background = element_blank())
```

Матрица сопряженности демонстрирует плотность сети, отсутствие точки означает, что два индивида не взаимодействовали. Изобразим матрицу сопряженности для одного класса, например, 4B:
```{r}
tmp %>% filter(from_class == "4B", to_class == "4B") %>%
  ggplot(aes(from, to)) +
  geom_raster(aes(fill=Freq)) +
  scale_fill_gradient2(low="gray100", mid="gray50", high="gray0") +
  theme(legend.position="none") +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        panel.background = element_blank())
```

Можно видеть, что матрица сопряженности намного плотнее для конкретного класса.

### Длины путей

Посчитаем среднее расстояние между индивидами в сети.
```{r}
mean_distance(network)
```

В принципе ожидать, что в школе, где есть учителя, через которые связанны все классы,
будут длинные пути нелогично. Найдем максимальную длину:
```{r}
max(distances(network))
```

### Коэффициент кластеризации
Посчитаем коэффициенты кластеризации для всей сети (вероятность того, что смежные для случайной вершины вершины будут связаны):
```{r}
transitivity(network)
```

Посчитаем коэффициенты кластеризации для каждой вершины:
```{r}
V(network)$transitivity <- transitivity(network, type="local")
V(network)$transitivity[1:50]
vertices$transitivity <- V(network)$transitivity
```

Проверим топ 10 индивидов с наибольшим коэффициентом кластеризации:
```{r}
(vertices %>% arrange(-transitivity))[1:10,]
```

Это ученики с небольшими степенями.

### Анализ соседей учителей

Зная, что в школах России у начальных классов есть по одному главному учителю, который преподает почти все дисциплины, интересно проверить, будем ли мы наблюдать ту же картину в иностранной школе. Посчитаем соседей для каждого учителя в каждом классе:
```{r}
for(i in V(network)[class == "Teachers"]) {
  print(paste0("neighbors of the teacher with id ", V(network)[i]$name, ":"))
  print(table(neighbors(network, i)$class))
}
```
Видно, что чаше у одного учителя подавляюще много контактов с учениками одного класса, но также встречаются учителя, которые активно контактируют с учениками двух классов.

## Визуализация сети

Протестируем разные способы визуализации сети. 

### Методы визуализации

Начнем с круговой визуализации. Так как в сети много вершин, то визуализация всех данных через круг приведет к тому, что на ней будет ничего не видно. Но визуализировать отдельный класс не имеет смысла, так как получится почти полный граф. Посмотрим как выглядят связи для топ 30 учеников с наименьшими степенями свободы.
```{r}
set.seed(0)

igraph_options(vertex.size=8, 
               vertex.label.cex=0.5, 
               vertex.label.dist=1.5, 
               vertex.label.degree=3*pi/2,
               edge.width=1)
subnetwork <- subgraph(network, (vertices %>% filter(class != "Teachers") %>%
                                   arrange(wdegree))[1:30,]$name)
plot(subnetwork, layout=layout_in_circle)
```

Продолжим работать с той же выборкой учеников. Попробуем разные методы визуализации, позже визуализируем всю сеть. Сеть:
```{r}
plot(subnetwork, layout=layout_on_grid)
```

Сфера:
```{r}
plot(subnetwork, layout=layout_on_sphere)
```

Случайное расположение вершин:
```{r}
plot(subnetwork, layout=layout_randomly)
```

Алгоритм Дэвидсона и Харела:
```{r}
plot(subnetwork, layout=layout_with_dh)
```

Алгоритм Фрухтермана и Рейнгольда:
```{r}
plot(subnetwork, layout=layout_with_fr)
```

Сигма алгоритм:
```{r}
plot(subnetwork, layout=layout_with_sugiyama)
```

В общем, в igraph есть много разных методов отрисовки графов, не будем все тестировать. 

### Декорирование графа

Перейдем к визуализации всей сети, только теперь будет декорировать граф, используя возможности библиотеки igraph. Каждый класс будем окрашивать в свой цвет. Вершины учеников изобразим как круги, а вершины учителей - как квадраты. Размер вершины будет пропорционален ее степени. Ширина ребра пропорционально ее весу.
```{r}
V(network)$label <- V(network)$name

V(network)$shape <- "circle"
V(network)[class=="Teachers"]$shape <- "square"

V(network)[class == "1A"]$color <- "deeppink1"
V(network)[class == "1B"]$color <- "cyan4"
V(network)[class == "2A"]$color <- "brown1"
V(network)[class == "2B"]$color <- "olivedrab4"
V(network)[class == "3A"]$color <- "cyan1"
V(network)[class == "3B"]$color <- "deeppink4"
V(network)[class == "4A"]$color <- "olivedrab1"
V(network)[class == "4B"]$color <- "royalblue3"
V(network)[class == "5A"]$color <- "gold1"
V(network)[class == "5B"]$color <- "gold4"
V(network)[class == "Teachers"]$color <- "black"

E(network)$color <- "black"

set.seed(1)
plot(network, 
     vertex.size=sqrt(V(network)$wdegree/50), 
     edge.width=E(network)$Freq/400,
     vertex.label=NA,
     layout=layout_with_fr)
```

На этом графике хорошо заметно как учителя занимаются с одним или двумя классами, не более.

### Граф более высокого уровня

Теперь объединим вершины учеников по классам и построим граф для более высокого уровня. Каждая вершина соответствует своему классу, размер вершины отображает число учеников в нем. Толщина ребра отражает степень взаимодействия между классами. В центре расположим учителей, а классы расположим по кругу.
```{r}
classes <- as.factor(V(network)$class)
network.c <- contract(network, classes, 
                      vertex.attr.comb=list(name="ignor",
                                           class="first",
                                           sex="ignor",
                                           degree="ignor",
                                           transitivity="ignor",
                                           label="ignor",
                                           shape="first",
                                           color="first"))
V(network.c)$label <- V(network.c)$class
V(network.c)$class.size <- as.vector(table(V(network)$class))
network.c <- simplify(network.c,
                      edge.attr.comb=list(Freq="sum",
                                          color="ignor"))
E(network.c)$color <- "azure4"

set.seed(1)
l <- layout_as_star(network.c, center = 11)
plot(network.c,
     vertex.size=V(network.c)$class.size,
     edge.width=E(network.c)$Freq/500,
     vertex.label.dist=3,
     vertex.label.color="black",
     layout=l)
```

График хорошо показывает, ученики каких классов активно друг с другом взаимодействуют. Если сравнить этот график с тем, что выше, можно увидеть, что толщина ребер графа для классов хорошо отражает пересечение (близость друг к другу) классов в графе. Вероятно, у этих классов есть общие предметы или кружки. Видно, что толстые ребра между классами сверстников.

### Эгоцентрическая сеть

Построим эгоцентрическую сеть, в центре которой, например, будет учитель с наименьшим индексом. В такой сети отражены соседи выбранной вершины и все связи между ними. Учителя с индексом 1521 поместим в центр и изменим его цвет на белый.
```{r}
network.e <- make_ego_graph(network, order=1, nodes=V(network)[name=="1521"])
V(network.e[[1]])$label <- ""
V(network.e[[1]])[name=="1521"]$color <- "white"

set.seed(0)
plot(network.e[[1]], 
     vertex.size=sqrt(V(network.e[[1]])$wdegree/6), 
     edge.width=E(network.e[[1]])$Freq/60,
     layout=layout_with_fr)
```

Видно, что две наибольшие группы, с которыми учитель 1521 взаимодействует, - это другие учителя и класс 4B.